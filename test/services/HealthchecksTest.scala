/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.1.0-SNAPSHOT
 * apidoc:0.11.21 http://dockerhost:9000/movio/apidoc-generator-reference/0.1.0-SNAPSHOT/test_play_app_tests
 */

package services

import com.typesafe.config. { ConfigFactory, Config }
import org.scalatestplus.play.OneServerPerSuite
import play.api.test._
import play.api.Configuration
import play.api.libs.concurrent.Execution.Implicits.defaultContext
import scala.concurrent.duration._
import scala.language.postfixOps

import movio.testtools.MovioSpec
import movio.testtools.kafka.{ KafkaTestKit, KafkaTestKitUtils }

class HealthchecksSystemTest extends MovioSpec with KafkaTestKit with OneServerPerSuite with FutureAwaits with DefaultAwaitTimeout {
  import movio.apidoc.generator.reference.v0._
  import movio.apidoc.generator.reference.v0.models._
  import movio.apidoc.generator.reference.v0.kafka._

  val kafkaServer = createKafkaServer()
  kafkaServer.startup()

  override def afterAll() = {
    kafkaServer.shutdown()
    zkServer.stop()
  }

  describe("Healthchecks") {
    
  }

  val healthcheckEntity1 = 
    Healthcheck (
      status = "status1"
    )
val healthcheckEntity2 = 
    Healthcheck (
      status = "status2"
    )
  val healthcheckEntities = Seq(healthcheckEntity1, healthcheckEntity2)

  lazy val brokerConnectionString = kafkaServer.config.hostName + ":" + kafkaServer.config.port
  lazy val tenant = "test"

  lazy val testConfig = ConfigFactory.parseString(s"""
      |configuration {
      |  log-on-startup = false
      |}
      |
      |movio.apidoc.generator.reference.kafka {
      |  producer {
      |    broker-connection-string : "$brokerConnectionString"
      |  }
      |}
      |
      |movio.apidoc.generator.reference.kafka {
      |  consumer {
      |    offset-storage-type = "kafka"
      |    offset-storage-dual-commit = false
      |    timeout.ms = "100"
      |    zookeeper.connection = "${zkServer.getConnectString}"
      |  }
      |}
      |""".stripMargin)
    .withFallback(ConfigFactory.load())


  import scala.collection.JavaConversions._
  override lazy val app: FakeApplication = new FakeApplication(
    additionalConfiguration = testConfig.entrySet.map(v => v.getKey -> v.getValue.unwrapped).toMap
  )
}
